[{"content":"  Let\u0026rsquo;s deploy Concourse, a continuous-integration, continuous delivery (CI/CD) application (similar to Jenkins and CircleCI).\nWe\u0026rsquo;ll deploy it to Google Cloud, to our Google Kubernetes Engine (GKE).\nIn this post, we\u0026rsquo;ll use HashiCorp\u0026rsquo;s Terraform to create our cluster.\nWe assume you\u0026rsquo;ve already installed the terraform command-line interface (CLI) and created a Google Cloud account.\nmkdir -p ~/workspace/gke cd ~/workspace/gke Next we download the terraform templates and terraform vars file:\ncurl -OL https://raw.githubusercontent.com/cunnie/deployments/6b230118399f4326094b4d60e21cda32e8c6f321/terraform/gcp/gke/gke.tf curl -OL https://raw.githubusercontent.com/cunnie/deployments/6b230118399f4326094b4d60e21cda32e8c6f321/terraform/gcp/gke/vpc.tf curl -OL https://raw.githubusercontent.com/cunnie/deployments/6b230118399f4326094b4d60e21cda32e8c6f321/terraform/gcp/gke/terraform.tfvars curl -OL https://raw.githubusercontent.com/cunnie/deployments/6b230118399f4326094b4d60e21cda32e8c6f321/terraform/gcp/gke/outputs.tf At this point we hear cries of protest, \u0026ldquo;What?! Downloading dubious files from sketchy software developers on the internet? Files whose provenance is murky at best?\u0026rdquo;\nLet us reassure you: the provenance of these files is crystal-clear: they have been patterned after templates from HashiCorp\u0026rsquo;s excellent tutorial, Provision a GKE Cluster (Google Cloud), and the companion git repo, https://github.com/hashicorp/learn-terraform-provision-gke-cluster. [provenance]\nLet\u0026rsquo;s login with gcloud:\ngcloud auth application-default login (if you get a command not found error, then it means you need to install Google Cloud\u0026rsquo;s CLI; the HashiCorp tutorial has great instructions.)\nLet\u0026rsquo;s customize our terraform.tfvars file. At the very least, change the project_id to your Google Cloud\u0026rsquo;s project\u0026rsquo;s ID. If you\u0026rsquo;re not sure what that is, you can find it on the Google console:\n  Let\u0026rsquo;s use neovim (or your editor of choice):\nnvim terraform.tfvars Let\u0026rsquo;s change the Project ID to \u0026ldquo;my-google-project-id\u0026rdquo; (assuming that\u0026rsquo;s your Google Project\u0026rsquo;s name, which it isn\u0026rsquo;t):\n-project_id = \u0026#34;blabbertabber\u0026#34; -friendly_project_id = \u0026#34;nono\u0026#34; +project_id = \u0026#34;my-google-project-id\u0026#34; +friendly_project_id = \u0026#34;my-google-project-id\u0026#34; We\u0026rsquo;re ready to terraform!\nterraform init terraform apply # answer \u0026#34;yes\u0026#34; when asked, \u0026#34;Do you want to perform these actions?\u0026#34; The terraform apply takes ~10 minutes to complete. Now let\u0026rsquo;s get our cluster credentials:\ngcloud container clusters get-credentials $(terraform output -raw kubernetes_cluster_name) --zone $(terraform output -raw zone) We have a cluster at this point—let\u0026rsquo;s test by deploying nginx:\nkubectl run nginx --image=nginx kubectl get pods You should see the following output:\nNAME READY STATUS RESTARTS AGE nginx 1/1 Running 0 2m21s Stay tuned for the next installment, where we configure load balancers and install Concourse CI.\n Footnotes provenance\nThis begs the question, \u0026ldquo;If we\u0026rsquo;re patterning our templates after HashiCorp\u0026rsquo;s, why not use HashiCorp\u0026rsquo;s directly? Why change the templates?\u0026rdquo;\nOur answer: \u0026ldquo;If you want to use the HashiCorp templates, by all means do so—they\u0026rsquo;re great templates!\u0026rdquo;\nOur templates have been modified from HashiCorp\u0026rsquo;s to suit our purposes; for example, we split the templates into a virtual private cloud (VPC) (vpc.tf) template and a Google Kubernetes Engine (gke) (gke.tf) template. It seemed like a good idea at the time. Also, we didn\u0026rsquo;t want to spend a lot of money, so instead of three instances in the region, we modified the template to place two instances in the same availability zone.\n[e2-medium instances cost $24.46 / month in the region us-central1. We didn\u0026rsquo;t want to spend the extra $25 for a third instance.]\nFinally, we didn\u0026rsquo;t like the name of our Google Cloud project (\u0026ldquo;blabbertabber\u0026rdquo;): it was too long \u0026amp; referred to a project we had mothballed months ago. We wanted a shorter and friendlier name (\u0026ldquo;nono\u0026rdquo;), and we were loath to create a brand new Google Cloud project, so we modified the templates to include a \u0026ldquo;friendly\u0026rdquo; project name.\n","permalink":"https://blog.nono.io/post/concourse_on_k8s-1/","summary":"Let\u0026rsquo;s deploy Concourse, a continuous-integration, continuous delivery (CI/CD) application (similar to Jenkins and CircleCI).\nWe\u0026rsquo;ll deploy it to Google Cloud, to our Google Kubernetes Engine (GKE).\nIn this post, we\u0026rsquo;ll use HashiCorp\u0026rsquo;s Terraform to create our cluster.\nWe assume you\u0026rsquo;ve already installed the terraform command-line interface (CLI) and created a Google Cloud account.\nmkdir -p ~/workspace/gke cd ~/workspace/gke Next we download the terraform templates and terraform vars file:","title":"Concourse CI on Kubernetes (GKE), Part 1: Terraform"},{"content":"Why am I creating a new blog? What was wrong with the old blog? Why don\u0026rsquo;t I use Medium?\nThe short version: The old blog is frozen in time, like a prince caught in amber 1 or a dandy in aspic 2. I can no longer post to it.\nThe old blog, the Pivotal Engineering Journal, which many of Pivotal\u0026rsquo;s engineers contributed to, was archived a year after VMware acquired Pivotal. Every acquisition brings changes, and this was, in the scheme of things, a very minor one. At least VMware kept the blog instead of simply discarding it.\nDozens of my blog posts, representing hundreds of hours of work, are now tucked away in an even smaller corner of the internet. That\u0026rsquo;s okay: technical posts have a short shelf life. They have served their purpose.\nBut I cannot lay the fault at the feet of the VMware acquisition; I, too, had a part: My interest in blogging had waned, my output, diminished. In times past I had blogged as frequently as every two months, but then slowed to a crawl: once every six months, and now it has been over a year since I wrote a technical blog post.\nThen the wind shifted, and I again felt the urge to write. Perhaps a VMware corporate blog? Maybe not. I wasn\u0026rsquo;t sure if they\u0026rsquo;d be hands-off, allowing me to choose my topics, express my opinions.\nPerhaps Medium? I discounted that, too, for I find the experience of reading articles on Medium unpleasant, especially the plaintive warning that accompanies every post: \u0026ldquo;You have 2 free member-only stories left this month. Upgrade for unlimited access.\u0026rdquo; I wanted my readers to have unfettered access to my writing.\nFinally, I like writing in Markdown using Neovim: less mouse, more keyboard.\nThe winner? A combination of Hugo and GitHub Pages.\n","permalink":"https://blog.nono.io/post/why_new_blog/","summary":"Why am I creating a new blog? What was wrong with the old blog? Why don\u0026rsquo;t I use Medium?\nThe short version: The old blog is frozen in time, like a prince caught in amber 1 or a dandy in aspic 2. I can no longer post to it.\nThe old blog, the Pivotal Engineering Journal, which many of Pivotal\u0026rsquo;s engineers contributed to, was archived a year after VMware acquired Pivotal.","title":"The Old Blog is Dead. Long Live the New Blog!"}]